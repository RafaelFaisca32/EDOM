/*
 * generated by Xtext 2.28.0
 */
package pt.isep.edom.xtext.assignment1.validation;

import org.eclipse.xtext.validation.Check;

import pt.isep.edom.assignment1.Assignment1Package;
import pt.isep.edom.assignment1.Decision;
import pt.isep.edom.assignment1.File;
import pt.isep.edom.assignment1.Project;
import pt.isep.edom.assignment1.Property;
import pt.isep.edom.assignment1.Target;
import pt.isep.edom.assignment1.Task;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class DslValidator extends AbstractDslValidator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_VERSION = "invalidVersion";
	public static final String INVALID_VALUE = "invalidValue";

	@Check
	public void checkProjectAttributes(Project project) {
		if (project.getName() == null || project.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.PROJECT__NAME,
					INVALID_NAME);
		}
		if(project.getVersion() == null || project.getVersion().isEmpty()) {
			warning("Version can't be empty",
					Assignment1Package.Literals.PROJECT__VERSION,
					INVALID_VERSION);
		}
	}
	
	@Check
	public void checkFileAttributes(File file) {
		if (file.getName() == null || file.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.FILE__NAME,
					INVALID_NAME);
		}
	}
	
	@Check
	public void checkTaskName(Task task) {
		if (task.getName() == null || task.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.TASK__NAME,
					INVALID_NAME);
		}
	}

	@Check
	public void checkRepeatedTaskName(Task task, Project project) {

		for(Task task1 : project.getTasks()) {
			if(task.getName().equals(task1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
		
		for(Target target1 : project.getTarget()) {
			if(task.getName().equals(target1.getHas().getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
		
		for(Task task1 : task.getDepends()) {
			if(task.getName().equals(task1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
	}
	
	@Check
	public void checkPropertyAttributes(Property property) {
		if (property.getName() == null || property.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.PROPERTY__NAME,
					INVALID_NAME);
		}
		if (property.getValue() == null || property.getValue().isEmpty()) {
			warning("Value can't be empty",
					Assignment1Package.Literals.PROPERTY__VALUE,
					INVALID_VALUE);
		}
	}

	@Check
	public void checkRepeatedPropertyName(Task task, Property property, Decision decision) {

		for(Property propert1 : task.getHas()) {
			if(property.getName().equals(propert1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.PROPERTY__NAME,
						INVALID_NAME);
			}
		}
		
		for(Property property1 : decision.getHas()) {
			if(property.getName().equals(property1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.PROPERTY__NAME,
						INVALID_NAME);
			}
		}
		
		for(Property property1 : property.getHas()) {
			if(property.getName().equals(property1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.PROPERTY__NAME,
						INVALID_NAME);
			}
		}
	}
	
	
}
