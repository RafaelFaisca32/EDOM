/*
 * generated by Xtext 2.28.0
 */
package pt.isep.edom.xtext.assignment1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.common.util.EList
import pt.isep.edom.assignment1.Model
import pt.isep.edom.assignment1.Target
import pt.isep.edom.assignment1.Property
import pt.isep.edom.assignment1.Task
import pt.isep.edom.assignment1.Action
import pt.isep.edom.assignment1.Decision

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {
	
	def String generatePumlTarget(EList<Target> list){

		var stringAux="";
		for(Target t : list){
           stringAux += "class Target_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
           		+ "Project ->" + "Target_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + "\n"
           		+ "class File_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + " { \n"
        		+ "name "+ t.getOutput().getName() + "\n } \n"
        		+ "Target_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + "-> " + "File_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + " \n"
        		+ "class Task_"+t.getHas().getName().replaceAll(" ", "_").replace(".","_") + " { \n"
       			+ "name "+ t.getHas().getName() + "\n"
       			+ "description "+ t.getHas().getDescription() + "\n } \n"
       			+ "Target_" + t.getOutput().getName().replaceAll(" ", "_").replace(".","_") + "->" + "Task_" + t.getHas().getName().replaceAll(" ", "_").replace(".","_") + "\n"
        		+ generatePumlProperty(t);
        }
        return stringAux;
	}
	
	def String generatePumlProperty(Target t){

		var stringAux="";
		for(Property p : t.has.has){
           stringAux += "class Property_" + p.getName().replaceAll(" ", "_").replace(".","_") + " { \n" + 
                           "name "+ p.getName() + "\n" +
                           "value "+ p.getValue() + "\n" +
                            " } \n " 
                            + "Task_" + t.getHas().getName().replaceAll(" ", "_").replace(".","_") + "->" + "Property_" + p.getName().replaceAll(" ", "_").replace(".","_") + "\n";
        }
        return stringAux;
	}
	
	def String generatePumlTask(EList<Task> list){

		var stringAux="";
		for(Task t : list){
           stringAux += "class Task_"+t.getName().replaceAll(" ", "_").replace(".","_") + " { \n"
                           + "name "+ t.getName() + "\n"
                           + "description "+ t.getDescription() + "\n"
                           + " } \n " 
                           + "Project ->" + "Task_" + t.getName().replaceAll(" ", "_").replace(".","_") + "\n"
                           + generatePumlAction(t);
        }
        return stringAux;
	}
	
	def String generatePumlAction(Task t){
		
		var stringAux="";
		for(Action a : t.actions){
			stringAux += "class Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + "{ \n"
							+ "name "+ a.getName() + "\n"
							+" } \n"
							+ "Task_" + t.getName().replaceAll(" ", "_").replace(".","_") +  " -> Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n"
							+ "class InstructionBlock_" + a.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> InstructionBlock_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n"
							+ "class Start_" + a.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> Start_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n" 
							+ "class End_" + a.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> End_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n"
							+ "class InstructionBlock_" + a.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> Instruction_InstructionBlock_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n"
							+ generatePumlDecision(a);
		}					
		return stringAux
	}
	
	def String generatePumlDecision(Action a) {
		var stringAux="";
		for(Decision d : a.decisions) {
			stringAux += "class Decision_" + a.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "Action_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> Decision_" + a.getName().replaceAll(" ", "_").replace(".","_") + "\n"
							+ generatePumlPropertyDecision(a,d);
		}
		return stringAux;
	}
	
	def String generatePumlPropertyDecision(Action a,Decision d) {
		var stringAux="";
		for(Property p : d.has) {
			stringAux += "class Property_" + p.getName().replaceAll(" ", "_").replace(".","_") + " { \n } \n"
							+ "name "+ p.getName() + "\n"
							+ "description "+ p.getValue() + "\n } \n"
							+ "Decision_" + a.getName().replaceAll(" ", "_").replace(".","_") + " -> Property_" + p.getName().replaceAll(" ", "_").replace(".","_") + "\n";
		}
		return stringAux;
	}
		
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
       var stringFormat ="@startuml \n";
       var model = resource.allContents.filter(Model).next;
       stringFormat +=  "class Model { \nname \n" + "} "
			 + "class Project { \n name " + model.project.name +"\n version \n" + model.project.version + "} \n"
			 + "Model -> Project \n"
	  	  	 + generatePumlTarget(model.project.target)
	  	  	 + generatePumlTask(model.project.tasks)
	  	  	 + "@enduml \n";
        
        fsa.generateFile("xtext.puml", stringFormat);
		
		}
}
