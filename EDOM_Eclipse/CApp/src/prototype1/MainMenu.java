	package prototype1;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import prototype1.domain.Action;
import prototype1.domain.Condition;
import prototype1.domain.Decision;
import prototype1.domain.File;
import prototype1.domain.Project;
import prototype1.domain.Property;
import prototype1.domain.Target;
import prototype1.domain.Task;

public class MainMenu {
		
		public static Project createProject() {
			
			List<Target> targetList = new ArrayList<>();
			List<Task> taskList = new ArrayList<>();
				String name1 = "Build Classes ";
				File input1 = new File("BuildClasses.c");
				File output1 = new File("BuildClasses.o");
				List<Property> propertyList1 = new ArrayList<>();
				List<Action> actionList1 = new ArrayList<>();
						Property propertyBuildClasses1 = new Property("Build","build");
						propertyList1.add(propertyBuildClasses1);
				Task task1 = new Task("Build classes","this c class is responsible of building other classes",propertyList1,null,null);
				Target target1 = new Target(name1,input1,output1,task1,null);
				targetList.add(target1);
				String name2 = "Dependencies";
				File input2 = new File("BuildDependencies.c");
				File output2 = new File("BuildDependencies.o");
				List<Property> propertyList2 = new ArrayList<>();
				List<Action> actionList2 = new ArrayList<>();
						Property propertyDependencies1 = new Property("BuildDep","buildDep");
						propertyList2.add(propertyDependencies1);
				Task task2 = new Task("Build dependencies","this class is responsible for the connecting the dependencies",propertyList2,null,null);
				Target target2 = new Target(name2,input2,output2,task2,null);
				targetList.add(target2);
				String name3 = "Info";
				File input3 = new File("InfoBuilder.c");
				File output3 = new File("InfoBuilder.lib");
				List<Property> propertyList3 = new ArrayList<>();
				List<Action> actionList3 = new ArrayList<>();
						Property propertyInfo1 = new Property("Lib","lib");
						propertyList3.add(propertyInfo1);
				Task task3 = new Task("InformationLibrary","File contains a library of information used by a specific program. It may store a variety of information.",propertyList3,null,null);
				Target target3 = new Target(name3,input3,output3,task3,null);
				targetList.add(target3);
				String name4 = "Declarations";
				File input4 = new File("header.c");
				File output4 = new File("header.h");
				List<Property> propertyList4 = new ArrayList<>();
				List<Action> actionList4 = new ArrayList<>();
						Property propertyDeclarations1 = new Property("Dec","dec");
						propertyList4.add(propertyDeclarations1);
				Task task4 = new Task("DeclarationsToShare","C function declarations and macro definitions to be shared between several source files.",propertyList4,null,null);
				Target target4 = new Target(name4,input4,output4,task4,null);
				targetList.add(target4);
				List<Property> propertyTaskList1 = new ArrayList<>();
				List<Action> actionTaskList1 = new ArrayList<>();
					Property propertyDeleteFiles1 = new Property("Del","del");
					propertyTaskList1.add(propertyDeleteFiles1);
					List<Decision> decisionTaskList1 = new ArrayList<>();
						List<Property> propertyTaskListDecision1 = new ArrayList<>();
							Property propertyTaskDecision1 = new Property("IsTempFile","boolean");
							propertyTaskListDecision1.add(propertyTaskDecision1);
						List<Condition> conditionTaskListDecision1 = new ArrayList<>();
							Condition conditionTaskDecision1 = new Condition("if");
							conditionTaskListDecision1.add(conditionTaskDecision1);
						Decision decisionTask1 = new Decision(propertyTaskListDecision1,conditionTaskListDecision1);
						decisionTaskList1.add(decisionTask1);
					Action actionTask1 = new Action("Delete jar files",decisionTaskList1);
					actionTaskList1.add(actionTask1);
				Task taskTask1 = new Task("DeleteFiles","task to delete the temporary files generated by the build",propertyTaskList1,actionTaskList1,null);
				taskList.add(taskTask1);
			Project project = new Project("CBuilder","v.22.30.2",targetList,taskList);
			return project;
		}
			
		public static void executeMenu(Project project) {
			
			boolean exit = false;
			Scanner input = new Scanner(System.in);
			
			while (!exit) {

				System.out.println(" # CBuilder ");
				System.out.println(" Please select one option:");
						
				System.out.println("0 - Exit");
				System.out.println("1 - Execute Tasks");
						
				String line = input.nextLine();
				int num = Integer.valueOf(line);
						
				switch (num) {
					case 0:
						exit = true;
						break;
					case 1:
						TaskMenu.executeMenu(project);
						break;
				}
			}
		}
	}