/*
 * generated by Xtext 2.25.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import pt.isep.edom.assignment1.Model
import pt.isep.edom.assignment1.Task
import pt.isep.edom.assignment1.Target
import pt.isep.edom.assignment1.Property
import pt.isep.edom.assignment1.File
import pt.isep.edom.assignment1.Project
import pt.isep.edom.assignment1.Action
import pt.isep.edom.assignment1.Decision
import pt.isep.edom.assignment1.Condition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Project2Generator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		var model = resource.allContents.filter(Model).next;
		fsa.generateFile(
        	"main.java",
            model.main()
        )
        fsa.generateFile(
        	"MainMenu.java",
        	model.MainMenu()
        )
        fsa.generateFile(
        	"TaskMenu.java",
        	model.TaskMenu()
        )
        fsa.generateFile(
        	"Project.java",
        	model.project.project()
        )
        fsa.generateFile(
        	"Task.java",
        	model.project.tasks.get(0).task()
        )
        fsa.generateFile(
        	"Target.java",
        	model.project.target.get(0).target()
        )
        fsa.generateFile(
        	"File.java",
        	model.project.target.get(0).input.file()
        )
        fsa.generateFile(
        	"Property.java",
        	model.project.tasks.get(0).has.get(0).property()
        )
        fsa.generateFile(
        	"Action.java",
        	model.project.tasks.get(0).actions.get(0).action()
        )
        fsa.generateFile(
        	"Decision.java",
        	model.project.tasks.get(0).actions.get(0).decisions.get(0).decision()
        )
        fsa.generateFile(
        	"Condition.java",
        	model.project.tasks.get(0).actions.get(0).decisions.get(0).condition.get(0).condition()
        )
	}
	
	private def condition(Condition condition)'''
	package prototype1.domain;
	
	public class «condition.class.simpleName.replace("Impl","")»{
		
		private String value;
		
		public «condition.class.simpleName.replace("Impl","")»(String value){
			this.value = value;
		}
		
		public String getValue(){
			return value;
		}
		
		public void setValue(String value){
			this.value = value;
		}
		
		@Override
		public String toString() {
			return "Condition{" +
					"value='" + value + '\'' +
					'}';
		}
	}
	'''
	
	private def decision(Decision decision)'''
	package prototype1.domain;
	
	public class «decision.class.simpleName.replace("Impl","")»{
		
		private List<«decision.has.get(0).class.simpleName.replace("Impl","")»> «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		private List<«decision.condition.get(0).class.simpleName.replace("Impl","")»> «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		
		public «decision.class.simpleName.replace("Impl","")»(List<«decision.has.get(0).class.simpleName.replace("Impl","")»> «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»,List<«decision.condition.get(0).class.simpleName.replace("Impl","")»> «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower» = «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
			this.«decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public List<«decision.has.get(0).class.simpleName.replace("Impl","")»> get«decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstUpper»(){
			return «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		}
		
		public List<«decision.condition.get(0).class.simpleName.replace("Impl","")»> get«decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public void set«decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstUpper»(List<«decision.has.get(0).class.simpleName.replace("Impl","")»> «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»){
			this.«decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower» = «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		}
		
		public void set«decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(List<«decision.condition.get(0).class.simpleName.replace("Impl","")»> «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		@Override
		public String toString() {
			return "Decision{" +
					"properties=" + «decision.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower» +
					", conditions=" + «decision.condition.get(0).class.simpleName.replace("Impl","s").toFirstLower» +
					'}';
		}
	}
	'''

	private def project(Project project)'''
	package prototype1.domain;
	
	public class «project.class.simpleName.replace("Impl","")»{
		
		private String name;
		private String version;
		private List<«project.target.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		private List<«project.tasks.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		
		public «project.class.simpleName.replace("Impl","")»(String name,String version,List<«project.target.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»,List<«project.tasks.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.name = name;
			this.version = version;
			this.«project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
			this.«project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public String getName(){
			return name;
		}
		
		public String getVersion(){
			return version;
		}
		
		public List<«project.target.get(0).class.simpleName.replace("Impl","").toFirstUpper»> get«project.target.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public List<«project.tasks.get(0).class.simpleName.replace("Impl","").toFirstUpper»> get«project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public void setName(String name){
			this.name = name;
		}
		
		public void setVersion(String version){
			this.version = version;
		}
		
		public void set«project.target.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(List<«project.target.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «project.target.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public void set«project.tasks.get(0).class.simpleName.replace("Impl","").toFirstUpper»(List<«project.tasks.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «project.tasks.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
	}
	'''

	private def file(File file)'''
	package prototype1.domain;
	
	public class «file.class.simpleName.replace("Impl","")»{
		
		private String name;
		
		public «file.class.simpleName.replace("Impl","")»(String name){
			this.name = name;
		}
		
		public String getName(){
			return name;
		}
		
		public void setName(String name){
			this.name = name;
		}
	}
	'''
	
	private def action(Action action)'''
	package prototype1.domain;
	
	public class «action.class.simpleName.replace("Impl","")»{
		
		private String name;
		private List<«action.decisions.get(0).class.simpleName.replace("Impl","")»> «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		
		public «action.class.simpleName.replace("Impl","")»(String name,List<«action.decisions.get(0).class.simpleName.replace("Impl","")»> «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.name = name;
			this.«action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
				
		public String getName(){
			return name;
		}
				
		public void setName(String name){
			this.name = name;
		}
		
		public List<«action.decisions.get(0).class.simpleName.replace("Impl","")»> get«action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
		
		public void set«action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(List<«action.decisions.get(0).class.simpleName.replace("Impl","")»> «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «action.decisions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
	}
	'''
	
	private def property(Property property)'''
	package prototype1.domain;
	
	public class «property.class.simpleName.replace("Impl","")»{
		
		private String name;
		private String value;
		
		public «property.class.simpleName.replace("Impl","")»(String name,String value){
			this.name = name;
			this.value = value;
		}
		
		public String getName(){
			return name;
		}
		
		public String getValue(){
			return value;
		}
		
		public void setName(String name){
			this.name = name;
		}
		
		public void setValue(String value){
			this.value = value;
		}
		
		public String toString(){
			return "Property -> Name: " + name + ", Value: " + value;
		}
	}
	'''
	
	private def target(Target target)'''
		package prototype1.domain;
		
		public class «target.class.simpleName.replace("Impl","")» {
			
			private String name;
			private «target.has.class.simpleName.replace("Impl","")» «target.has.class.simpleName.replace("Impl","").toFirstLower»;
			private «target.input.class.simpleName.replace("Impl","")» input;
			private «target.input.class.simpleName.replace("Impl","")» output;
			private List<«target.class.simpleName.replace("Impl","")»> «target.class.simpleName.replace("Impl","s").toFirstLower»;
			
			public «target.class.simpleName.replace("Impl","")»(String name,«target.input.class.simpleName.replace("Impl","")» input,«target.input.class.simpleName.replace("Impl","")» output,«target.has.class.simpleName.replace("Impl","").toFirstUpper» «target.has.class.simpleName.replace("Impl","").toFirstLower»,List<«target.class.simpleName.replace("Impl","").toFirstUpper»> «target.class.simpleName.replace("Impl","s").toFirstLower»){
				this.name = name;
				this.input = input;
				this.output = output;
				this.«target.has.class.simpleName.replace("Impl","").toFirstLower» = «target.has.class.simpleName.replace("Impl","").toFirstLower»;
				this.«target.class.simpleName.replace("Impl","s").toFirstLower» = «target.class.simpleName.replace("Impl","s").toFirstLower»;
			}
				
			public String getName(){
				return name;
			}
			
			public «target.input.class.simpleName.replace("Impl","")» getInput(){
				return input;
			} 
				
			public «target.input.class.simpleName.replace("Impl","")» getOutput(){
				return output;
			}
			
			public «target.has.class.simpleName.replace("Impl","")» get«target.has.class.simpleName.replace("Impl","").toFirstUpper»(){
				return «target.has.class.simpleName.replace("Impl","").toFirstLower»;
			}
			
			public List<«target.class.simpleName.replace("Impl","")»> get«target.class.simpleName.replace("Impl","s").toFirstUpper»(){
				return «target.class.simpleName.replace("Impl","s").toFirstLower»;
			}
			
			public void setName (String name){
				this.name = name;
			}
			
			public void setInput(«target.input.class.simpleName.replace("Impl","")» input){
				this.input = input;
			}
			
			public void setOutput(«target.input.class.simpleName.replace("Impl","")» output){
				this.output = output;
			}
			
			public void set«target.has.class.simpleName.replace("Impl","").toFirstUpper»(«target.has.class.simpleName.replace("Impl","").toFirstUpper» «target.has.class.simpleName.replace("Impl","").toFirstLower»){
				this.«target.has.class.simpleName.replace("Impl","").toFirstLower» = «target.has.class.simpleName.replace("Impl","").toFirstLower»;
			}
			
			public void set«target.class.simpleName.replace("Impl","s").toFirstUpper»(List<«target.class.simpleName.replace("Impl","").toFirstUpper»> «target.class.simpleName.replace("Impl","s").toFirstLower»){
				this.«target.class.simpleName.replace("Impl","s").toFirstLower» = «target.class.simpleName.replace("Impl","s").toFirstLower»;
			}
		}
	'''
	
	private def task(Task task) '''
	package prototype1.domain;
		
	public class «task.class.simpleName.replace("Impl","")» {
			
		private String name;
		private String description;
		private List<«task.has.get(0).class.simpleName.replace("Impl","")»> «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		private List<«task.actions.get(0).class.simpleName.replace("Impl","")»> «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		private List<«task.class.simpleName.replace("Impl","")»> «task.class.simpleName.replace("Impl","s").toFirstLower»;
		
		public «task.class.simpleName.replace("Impl","")»(String name,String description,List<«task.has.get(0).class.simpleName.replace("Impl","")»> «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»,List<«task.actions.get(0).class.simpleName.replace("Impl","")»> «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»,List<«task.class.simpleName.replace("Impl","")»> «task.class.simpleName.replace("Impl","s").toFirstLower»){
			this.name = name;
			this.description = description;
			this.«task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower» = «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
			this.«task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
			this.«task.class.simpleName.replace("Impl","s").toFirstLower» = «task.class.simpleName.replace("Impl","s").toFirstLower»;
		}
			
		public List<«task.actions.get(0).class.simpleName.replace("Impl","")»> get«task.actions.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
				
		public List<«task.has.get(0).class.simpleName.replace("Impl","")»> get«task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstUpper»(){
			return «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		}
				
		public List<«task.class.simpleName.replace("Impl","")»> get«task.class.simpleName.replace("Impl","s").toFirstUpper»(){
			return «task.class.simpleName.replace("Impl","s").toFirstLower»;
		}
				
		public String getDescription(){
			return description;
		} 
				
		public String getName(){
			return name;
		}
				
		public void setName(String name) {
			this.name = name;
		}
				
		public void setDescription(String description){
			this.description = description;
		}
				
		public void set«task.actions.get(0).class.simpleName.replace("Impl","s").toFirstUpper»(List<«task.actions.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»){
			this.«task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower» = «task.actions.get(0).class.simpleName.replace("Impl","s").toFirstLower»;
		}
				
		public void set«task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstUpper»(List<«task.has.get(0).class.simpleName.replace("Impl","").toFirstUpper»> «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»){
			this.«task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower» = «task.has.get(0).class.simpleName.replace("yImpl","ies").toFirstLower»;
		}
				
		public void set«task.class.simpleName.replace("Impl","s").toFirstUpper»(List<«task.class.simpleName.replace("Impl","")»> «task.class.simpleName.replace("Impl","s").toFirstLower»){
			this.«task.class.simpleName.replace("Impl","s").toFirstLower» = «task.class.simpleName.replace("Impl","s").toFirstLower»;
		}
	}
	'''
	
	private def main(Model model) '''
	package prototype1;
		
	public class main {
			
		public static void main(String[] args) {
			MainMenu.executeMenu(MainMenu.createProject());
		}
	}
		
    '''
    
    private def MainMenu(Model model) '''
	package prototype1;
		
	public class MainMenu {
		
		public static Project createProject() {
			
			List<Target> targetList = new ArrayList<>();
			List<Task> taskList = new ArrayList<>();
			«FOR i : 0 ..< model.project.target.length»
				String name«i» = "«model.project.target.get(i).name»";
				File input«i» = new File("«model.project.target.get(i).input.name»");
				File output«i» = new File("«model.project.target.get(i).output.name»");
				List<Property> propertyList«i» = new ArrayList<>();
				List<Action> actionList«i» = new ArrayList<>();
				«FOR j : 0 ..<model.project.target.get(i).has.has.length»
					Property property«model.project.target.get(i).name.toFirstUpper»«j» = new Property("«model.project.target.get(i).has.has.get(j).name»","«model.project.target.get(i).has.has.get(j).value»");
					propertyList«i».add(property«model.project.target.get(i).name.toFirstUpper»«j»);
				«ENDFOR»
				«FOR j : 0 ..<model.project.target.get(i).has.actions.length»
					List<Decision> decisionList«i» = new ArrayList<>();
					«FOR k : 0 ..<model.project.target.get(i).has.actions.get(j).decisions.length»
						List<Property> propertyListDecision«j» = new ArrayList<>();
						«FOR a : 0 ..<model.project.target.get(i).has.actions.get(j).decisions.get(k).has.length»
							Property propertyDecision«a» = new Property("«model.project.target.get(i).has.actions.get(j).decisions.get(k).has.get(a).name»","«model.project.target.get(i).has.actions.get(j).decisions.get(k).has.get(a).value»");
							propertyListDecision«j».add(propertyDecision«a»);
						«ENDFOR»
						List<Condition> conditionListDecision«j» = new ArrayList<>();
						«FOR a : 0 ..<model.project.target.get(i).has.actions.get(j).decisions.get(k).condition.length»
							Condition conditionDecision«a» = new Condition("«model.project.target.get(i).has.actions.get(j).decisions.get(k).condition.get(a).value»");
							conditionListDecision«j».add(conditionDecision«a»);
						«ENDFOR»
						Decision decision«k» = new Decision(propertyListDecision«j»,conditionListDecision«j»);
						decisionList«i».add(decision«k»);
					«ENDFOR»
					Action action«j» = new Action("«model.project.target.get(i).has.actions.get(j).name»",decisionList«i»);
					actionList«i».add(action«j»);
				«ENDFOR»
				Task task«i» = new Task("«model.project.target.get(i).has.name»","«model.project.target.get(i).has.description»",propertyList«i»,actionList«i»,null);
				Target target«i» = new Target(name«i»,input«i»,output«i»,task«i»,null);
				targetList.add(target«i»);
			«ENDFOR»
			«FOR i : 0 ..< model.project.tasks.length»
				List<Property> propertyTaskList«i» = new ArrayList<>();
				List<Action> actionTaskList«i» = new ArrayList<>();
				«FOR j : 0 ..< model.project.tasks.get(i).has.length»
					Property property«model.project.tasks.get(i).name.toFirstUpper»«j» = new Property("«model.project.tasks.get(i).has.get(j).name»","«model.project.tasks.get(i).has.get(j).value»");
					propertyTaskList«i».add(property«model.project.tasks.get(i).name.toFirstUpper»«j»);
				«ENDFOR»
				«FOR j : 0 ..<model.project.tasks.get(i).actions.length»
					List<Decision> decisionTaskList«i» = new ArrayList<>();
					«FOR k : 0 ..<model.project.tasks.get(i).actions.get(j).decisions.length»
						List<Property> propertyTaskListDecision«j» = new ArrayList<>();
						«FOR a : 0 ..<model.project.tasks.get(i).actions.get(j).decisions.get(k).has.length»
							Property propertyTaskDecision«a» = new Property("«model.project.tasks.get(i).actions.get(j).decisions.get(k).has.get(a).name»","«model.project.tasks.get(i).actions.get(j).decisions.get(k).has.get(a).value»");
							propertyTaskListDecision«j».add(propertyTaskDecision«a»);
						«ENDFOR»
						List<Condition> conditionTaskListDecision«j» = new ArrayList<>();
						«FOR a : 0 ..<model.project.tasks.get(i).actions.get(j).decisions.get(k).condition.length»
							Condition conditionTaskDecision«a» = new Condition("«model.project.tasks.get(i).actions.get(j).decisions.get(k).condition.get(a).value»");
							conditionTaskListDecision«j».add(conditionTaskDecision«a»);
						«ENDFOR»
						Decision decisionTask«k» = new Decision(propertyTaskListDecision«j»,conditionTaskListDecision«j»);
						decisionTaskList«i».add(decisionTask«k»);
					«ENDFOR»
					Action actionTask«j» = new Action("«model.project.tasks.get(i).actions.get(j).name»",decisionTaskList«i»);
					actionTaskList«i».add(actionTask«j»);
				«ENDFOR»
				Task taskTask«i» = new Task("«model.project.tasks.get(i).name»","«model.project.tasks.get(i).description»",propertyTaskList«i»,actionTaskList«i»,null);
				taskList.add(taskTask«i»);
			«ENDFOR»
			Project project = new Project("«model.project.name»","«model.project.version»",targetList,taskList);
			return project;
		}
			
		public static void executeMenu(Project project) {
			
			boolean exit = false;
			Scanner input = new Scanner(System.in);
			
			while (!exit) {

				System.out.println(" # «model.project.name.toFirstUpper» ");
				System.out.println(" Please select one option:");
						
				System.out.println("0 - Exit");
				System.out.println("1 - Execute Tasks");
						
				String line = input.nextLine();
				int num = Integer.valueOf(line);
						
				switch (num) {
					case 0:
						exit = true;
						break;
					case 1:
						TaskMenu.executeMenu(project);
				}
			}
		}
	}
    '''
    
    private def TaskMenu(Model model)'''
    package prototype1;
    
    public class TaskMenu {
        	
    public static void executeMenu(Project project) {
        	
    	boolean exit = false;
        		Scanner input = new Scanner(System.in);
        	
        		while (!exit) {
        			System.out.println(" Please select one option:");
        		
        			System.out.println("0 - Return to main menu");
    
    				List<String> type = new ArrayList<>();
    				System.out.println("# Targets");
    				int contador;
    				int targets = project.getTargets().size();
        			for(contador=0;contador<targets;contador++){
        				System.out.println(contador+1 + " - " + project.getTargets().get(contador).getTask().getName());
    					type.add("Target");
        			}
    				System.out.println("# Tasks");
    				for(int i=0;i<project.getTasks().size();i++){
    					contador++;
    					System.out.println(contador + " - " + project.getTasks().get(i).getName());
    					type.add("Task");
    				}
        			String line = input.nextLine();
        			int num = Integer.valueOf(line);
        								
        			switch (num) {
        				case 0:
        					MainMenu.executeMenu(project);
        					break;
        				default:
    						String typeSelected = type.get(num-1);
        					if(typeSelected.equals("Task")) {
        						System.out.println("Task "+ project.getTasks().get(num-1-targets).getName());
    							System.out.println("Task Description - " + project.getTasks().get(num-1-targets).getDescription());
            					System.out.println("Properties " + project.getTasks().get(num-1-targets).getProperties());
    							for(Action a : project.getTasks().get(num-1-targets).getActions()){
    								System.out.println("Action " + a.getName());
    								System.out.println("Action Decisions " + a.getDecisions().toString());
    							}
        					} else {
    							System.out.println("#Target " +  project.getTargets().get(num-1).getName());
    							System.out.println("#Input File " +  project.getTargets().get(num-1).getInput().getName());
    							System.out.println("#Output File " +  project.getTargets().get(num-1).getOutput().getName());
            					System.out.println("#Task Name " + project.getTargets().get(num-1).getTask().getName());
            					System.out.println("#Task Property" + project.getTargets().get(num-1).getTask().getProperties());
        					}
        					break;
        			}
        		}
       		}
        }
    '''
    
    
}
