// automatically generated by Xtext
grammar org.xtext.Project2 with org.eclipse.xtext.common.Terminals

import "http://www.example.org/assignment1" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	'Model'
	name=EString
	'{'
		'project' project=Project
	'}';






Action returns Action:
	Action_Impl | InstructionBlock | Start | End;




Project returns Project:
	'Project'
	name=EString
	'{'
		('version' version=EString)?
		'target' '{' target+=Target ( "," target+=Target)* '}' 
		'tasks' '{' tasks+=Task ( "," tasks+=Task)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

Target returns Target:
	'Target'
	name=EString
	'{'
		('dependencies' '(' dependencies+=[Target|EString] ( "," dependencies+=[Target|EString])* ')' )?
		'has' has=Task
		'output' output=File
		'input' input=File
	'}';

Task returns Task:
	{Task}
	'Task'
	name=EString
	'{'
		('description' description=EString)?
		('depends' '(' depends+=[Task|EString] ( "," depends+=[Task|EString])* ')' )?
		('has' '{' has+=Property ( "," has+=Property)* '}' )?
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

File returns File:
	{File}
	'File'
	name=EString;

Property returns Property:
	{Property}
	'Property'
	name=EString
	'{'
		('value' value=EString)?
	'}';

Action_Impl returns Action:
	{Action}
	'Action'
	name=EString
	'{'
		('decisions' '{' decisions+=Decision ( "," decisions+=Decision)* '}' )?
	'}';

Decision returns Decision:
	'Decision'
	'{'
		('has' '{' has+=Property ( "," has+=Property)* '}' )?
		'condition' '{' condition+=Condition ( "," condition+=Condition)* '}' 
	'}';

InstructionBlock returns InstructionBlock:
	'InstructionBlock'
	name=EString
	'{'
		('decisions' '{' decisions+=Decision ( "," decisions+=Decision)* '}' )?
		'has' '{' has+=Instruction ( "," has+=Instruction)* '}' 
	'}';

Start returns Start:
	{Start}
	'Start'
	name=EString
	'{'
		('next' next=[Action|EString])?
		('decisions' '{' decisions+=Decision ( "," decisions+=Decision)* '}' )?
	'}';

End returns End:
	{End}
	'End'
	name=EString
	'{'
		('decisions' '{' decisions+=Decision ( "," decisions+=Decision)* '}' )?
	'}';

Condition returns Condition:
	{Condition}
	'Condition'
	'{'
		('value' value=EString)?
	'}';

Instruction returns Instruction:
	{Instruction}
	'Instruction'
	name=EString;
