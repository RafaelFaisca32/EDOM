/*
 * generated by Xtext 2.25.0
 */
package org.xtext.validation;

import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

import pt.isep.edom.assignment1.Action;
import pt.isep.edom.assignment1.Assignment1Package;
import pt.isep.edom.assignment1.Decision;
import pt.isep.edom.assignment1.File;
import pt.isep.edom.assignment1.Model;
import pt.isep.edom.assignment1.Project;
import pt.isep.edom.assignment1.Property;
import pt.isep.edom.assignment1.Target;
import pt.isep.edom.assignment1.Task;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class Project2Validator extends AbstractProject2Validator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_VERSION = "invalidVersion";
	public static final String INVALID_VALUE = "invalidValue";
	
	@Check
	public void checkProjectAttributes(Project project) {
		if (project.getName() == null || project.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.PROJECT__NAME,
					INVALID_NAME);
		}
		if(project.getVersion() == null || project.getVersion().isEmpty()) {
			warning("Version can't be empty",
					Assignment1Package.Literals.PROJECT__VERSION,
					INVALID_VERSION);
		}
	}
	
	@Check
	public void checkFileAttributes(File file) {
		if (file.getName() == null || file.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.FILE__NAME,
					INVALID_NAME);
		}
	}
	
	@Check
	public void checkPropertyAttributes(Property property) {
		if (property.getName() == null || property.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.PROPERTY__NAME,
					INVALID_NAME);
		}
		if(Character.isUpperCase(property.getName().charAt(0)) == false) {
			warning("Name needs to start with a capital letter",
					Assignment1Package.Literals.PROPERTY__NAME,
					INVALID_NAME);
		}
		if (property.getValue() == null || property.getValue().isEmpty()) {
			warning("Value can't be empty",
					Assignment1Package.Literals.PROPERTY__VALUE,
					INVALID_VALUE);
		}
	}
	
	@Check
	public void checkTargetAttributes(Target target) {
		if (target.getName() == null || target.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.TARGET__NAME,
					INVALID_NAME);
		}
		if(Character.isUpperCase(target.getName().charAt(0)) == false) {
			warning("Name needs to start with a capital letter",
					Assignment1Package.Literals.TARGET__NAME,
					INVALID_NAME);
		}
	}
	
	@Check
	public void checkTaskAttributes(Task task) {
		if (task.getName() == null || task.getName().isEmpty()) {
			warning("Name can't be empty",
					Assignment1Package.Literals.TASK__NAME,
					INVALID_NAME);
		}
		if( Character.isUpperCase(task.getName().charAt(0)) == false) {
			warning("Name needs to start with a capital letter",
					Assignment1Package.Literals.TASK__NAME,
					INVALID_NAME);
		}
	}
	
	@Check
	public void checkRepeatedPropertyName(Property property) {
		
		Model model = (Model) EcoreUtil2.getRootContainer(property);
		

		for(Task task : model.getProject().getTasks()) {
			for(Property property1 : task.getHas()) {
				if(property.getName().equals(property1.getName())) {
					warning("Name can't be repeated",
							Assignment1Package.Literals.PROPERTY__NAME,
							INVALID_NAME);
				}
			}
		}
		
		for(Task task : model.getProject().getTasks()) {
			for(Action actions : task.getActions()) {
				for(Decision decision : actions.getDecisions()) {
					for(Property property1 : decision.getHas()) {
						if(property.getName().equals(property1.getName())) {
							warning("Name can't be repeated",
									Assignment1Package.Literals.PROPERTY__NAME,
									INVALID_NAME);
						}
					}
				}
			}
		}
	}
	
	@Check
	public void checkRepeatedTaskName(Task task) {
		
		Model model = (Model) EcoreUtil2.getRootContainer(task);

		for(Task task1 :  model.getProject().getTasks()) {
			if(task.getName().equals(task1.getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
		
		for(Target target1 : model.getProject().getTarget()) {
			if(task.getName().equals(target1.getHas().getName())) {
				warning("Name can't be repeated",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
		
		for(Task task1 : task.getDepends()) {
			if(task.getName().equals(task1.getName())) {
				warning("Task can't depend of itself",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
	}
	
	@Check
	public void checkTargetName(Target target) {
		
		for(Target target1 : target.getDependencies()) {
			if(target1.getName().equals(target1.getName())) {
				warning("Target can't depend of itself",
						Assignment1Package.Literals.TASK__NAME,
						INVALID_NAME);
			}
		}
	}
	
}

