/*
 * generated by Xtext 2.25.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.Project2GrammarAccess;
import pt.isep.edom.assignment1.Assignment1Package;
import pt.isep.edom.assignment1.Condition;
import pt.isep.edom.assignment1.Decision;
import pt.isep.edom.assignment1.End;
import pt.isep.edom.assignment1.File;
import pt.isep.edom.assignment1.Instruction;
import pt.isep.edom.assignment1.InstructionBlock;
import pt.isep.edom.assignment1.Model;
import pt.isep.edom.assignment1.Project;
import pt.isep.edom.assignment1.Property;
import pt.isep.edom.assignment1.Start;
import pt.isep.edom.assignment1.Target;
import pt.isep.edom.assignment1.Task;

@SuppressWarnings("all")
public class Project2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Project2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Assignment1Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Assignment1Package.ACTION:
				sequence_Action_Impl(context, (pt.isep.edom.assignment1.Action) semanticObject); 
				return; 
			case Assignment1Package.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case Assignment1Package.DECISION:
				sequence_Decision(context, (Decision) semanticObject); 
				return; 
			case Assignment1Package.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case Assignment1Package.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case Assignment1Package.INSTRUCTION:
				sequence_Instruction(context, (Instruction) semanticObject); 
				return; 
			case Assignment1Package.INSTRUCTION_BLOCK:
				sequence_InstructionBlock(context, (InstructionBlock) semanticObject); 
				return; 
			case Assignment1Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Assignment1Package.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case Assignment1Package.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case Assignment1Package.START:
				sequence_Start(context, (Start) semanticObject); 
				return; 
			case Assignment1Package.TARGET:
				sequence_Target(context, (Target) semanticObject); 
				return; 
			case Assignment1Package.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *     Action_Impl returns Action
	 *
	 * Constraint:
	 *     (name=EString (decisions+=Decision decisions+=Decision*)?)
	 */
	protected void sequence_Action_Impl(ISerializationContext context, pt.isep.edom.assignment1.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     value=EString?
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decision returns Decision
	 *
	 * Constraint:
	 *     ((has+=Property has+=Property*)? condition+=Condition condition+=Condition*)
	 */
	protected void sequence_Decision(ISerializationContext context, Decision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns End
	 *     End returns End
	 *
	 * Constraint:
	 *     (name=EString (decisions+=Decision decisions+=Decision*)?)
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment1Package.Literals.FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment1Package.Literals.FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFileAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Action returns InstructionBlock
	 *     InstructionBlock returns InstructionBlock
	 *
	 * Constraint:
	 *     (name=EString (decisions+=Decision decisions+=Decision*)? has+=Instruction has+=Instruction*)
	 */
	protected void sequence_InstructionBlock(ISerializationContext context, InstructionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Instruction
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Instruction(ISerializationContext context, Instruction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment1Package.Literals.INSTRUCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment1Package.Literals.INSTRUCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstructionAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=EString project=Project)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Assignment1Package.Literals.MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment1Package.Literals.MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, Assignment1Package.Literals.MODEL__PROJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Assignment1Package.Literals.MODEL__PROJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getModelAccess().getProjectProjectParserRuleCall_4_0(), semanticObject.getProject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         version=EString? 
	 *         target+=Target 
	 *         target+=Target* 
	 *         tasks+=Task 
	 *         tasks+=Task*
	 *     )
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns Start
	 *     Start returns Start
	 *
	 * Constraint:
	 *     (name=EString next=[Action|EString]? (decisions+=Decision decisions+=Decision*)?)
	 */
	protected void sequence_Start(ISerializationContext context, Start semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Target returns Target
	 *
	 * Constraint:
	 *     (name=EString (dependencies+=[Target|EString] dependencies+=[Target|EString]*)? has=Task output=File input=File)
	 */
	protected void sequence_Target(ISerializationContext context, Target semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         (depends+=[Task|EString] depends+=[Task|EString]*)? 
	 *         (has+=Property has+=Property*)? 
	 *         (actions+=Action actions+=Action*)?
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
