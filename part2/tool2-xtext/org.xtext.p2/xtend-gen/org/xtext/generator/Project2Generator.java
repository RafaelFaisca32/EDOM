/**
 * generated by Xtext 2.25.0
 */
package org.xtext.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import pt.isep.edom.assignment1.Action;
import pt.isep.edom.assignment1.Condition;
import pt.isep.edom.assignment1.Decision;
import pt.isep.edom.assignment1.File;
import pt.isep.edom.assignment1.Model;
import pt.isep.edom.assignment1.Project;
import pt.isep.edom.assignment1.Property;
import pt.isep.edom.assignment1.Target;
import pt.isep.edom.assignment1.Task;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Project2Generator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    fsa.generateFile(
      "main.java", 
      this.main(model));
    fsa.generateFile(
      "MainMenu.java", 
      this.MainMenu(model));
    fsa.generateFile(
      "TaskMenu.java", 
      this.TaskMenu(model));
    fsa.generateFile(
      "Project.java", 
      this.project(model.getProject()));
    fsa.generateFile(
      "Task.java", 
      this.task(model.getProject().getTasks().get(0)));
    fsa.generateFile(
      "Target.java", 
      this.target(model.getProject().getTarget().get(0)));
    fsa.generateFile(
      "File.java", 
      this.file(model.getProject().getTarget().get(0).getInput()));
    fsa.generateFile(
      "Property.java", 
      this.property(model.getProject().getTasks().get(0).getHas().get(0)));
    fsa.generateFile(
      "Action.java", 
      this.action(model.getProject().getTasks().get(0).getActions().get(0)));
    fsa.generateFile(
      "Decision.java", 
      this.decision(model.getProject().getTasks().get(0).getActions().get(0).getDecisions().get(0)));
    fsa.generateFile(
      "Condition.java", 
      this.condition(model.getProject().getTasks().get(0).getActions().get(0).getDecisions().get(0).getCondition().get(0)));
  }
  
  private CharSequence condition(final Condition condition) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = condition.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_1 = condition.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("(String value){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getValue(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setValue(String value){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Condition{\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"value=\'\" + value + \'\\\'\' +");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\'}\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence decision(final Decision decision) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = decision.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_1 = decision.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_2 = decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_2, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_3 = decision.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_3, "\t");
    _builder.append("(List<");
    String _replace_4 = decision.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_4, "\t");
    _builder.append("> ");
    String _firstLower_2 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_2, "\t");
    _builder.append(",List<");
    String _replace_5 = decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_5, "\t");
    _builder.append("> ");
    String _firstLower_3 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_3, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_4 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(" = ");
    String _firstLower_5 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_6 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _firstLower_7 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_6 = decision.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_6, "\t");
    _builder.append("> get");
    String _firstUpper = StringExtensions.toFirstUpper(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstUpper, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_8 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_7 = decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_7, "\t");
    _builder.append("> get");
    String _firstUpper_1 = StringExtensions.toFirstUpper(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_1, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_9 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_9, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_2 = StringExtensions.toFirstUpper(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstUpper_2, "\t");
    _builder.append("(List<");
    String _replace_8 = decision.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_8, "\t");
    _builder.append("> ");
    String _firstLower_10 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_10, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_11 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(" = ");
    String _firstLower_12 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_3 = StringExtensions.toFirstUpper(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_3, "\t");
    _builder.append("(List<");
    String _replace_9 = decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_9, "\t");
    _builder.append("> ");
    String _firstLower_13 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_13, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_14 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_14, "\t\t");
    _builder.append(" = ");
    String _firstLower_15 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_15, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Decision{\" +");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"properties=\" + ");
    String _firstLower_16 = StringExtensions.toFirstLower(decision.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_16, "\t\t\t\t");
    _builder.append(" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("\", conditions=\" + ");
    String _firstLower_17 = StringExtensions.toFirstLower(decision.getCondition().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_17, "\t\t\t\t");
    _builder.append(" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("\'}\';");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence project(final Project project) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = project.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String version;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<");
    String _firstUpper = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper, "\t");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _firstUpper_1 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_1, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_1 = project.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("(String name,String version,List<");
    String _firstUpper_2 = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_2, "\t");
    _builder.append("> ");
    String _firstLower_2 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_2, "\t");
    _builder.append(",List<");
    String _firstUpper_3 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_3, "\t");
    _builder.append("> ");
    String _firstLower_3 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_3, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.version = version;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_4 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(" = ");
    String _firstLower_5 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_6 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _firstLower_7 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getVersion(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return version;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _firstUpper_4 = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_4, "\t");
    _builder.append("> get");
    String _firstUpper_5 = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_5, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_8 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _firstUpper_6 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_6, "\t");
    _builder.append("> get");
    String _firstUpper_7 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_7, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_9 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_9, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setVersion(String version){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.version = version;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_8 = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_8, "\t");
    _builder.append("(List<");
    String _firstUpper_9 = StringExtensions.toFirstUpper(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_9, "\t");
    _builder.append("> ");
    String _firstLower_10 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_10, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_11 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(" = ");
    String _firstLower_12 = StringExtensions.toFirstLower(project.getTarget().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_10 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_10, "\t");
    _builder.append("(List<");
    String _firstUpper_11 = StringExtensions.toFirstUpper(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_11, "\t");
    _builder.append("> ");
    String _firstLower_13 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_13, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_14 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_14, "\t\t");
    _builder.append(" = ");
    String _firstLower_15 = StringExtensions.toFirstLower(project.getTasks().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_15, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence file(final File file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = file.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_1 = file.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("(String name){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence action(final Action action) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = action.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_1 = action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_2 = action.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_2, "\t");
    _builder.append("(String name,List<");
    String _replace_3 = action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_3, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_1, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_2 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_2, "\t\t");
    _builder.append(" = ");
    String _firstLower_3 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_3, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_4 = action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_4, "\t");
    _builder.append("> get");
    String _firstUpper = StringExtensions.toFirstUpper(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_4 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_1 = StringExtensions.toFirstUpper(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_1, "\t");
    _builder.append("(List<");
    String _replace_5 = action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_5, "\t");
    _builder.append("> ");
    String _firstLower_5 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_5, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_6 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _firstLower_7 = StringExtensions.toFirstLower(action.getDecisions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence property(final Property property) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = property.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_1 = property.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("(String name,String value){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getValue(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setValue(String value){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.value = value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"Property -> Name: \" + name + \", Value: \" + value;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence target(final Target target) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _replace = target.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _replace_1 = target.getHas().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append(" ");
    String _firstLower = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ");
    String _replace_2 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_2, "\t");
    _builder.append(" input;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ");
    String _replace_3 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_3, "\t");
    _builder.append(" output;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_4 = target.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_4, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_5 = target.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_5, "\t");
    _builder.append("(String name,");
    String _replace_6 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_6, "\t");
    _builder.append(" input,");
    String _replace_7 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_7, "\t");
    _builder.append(" output,");
    String _firstUpper = StringExtensions.toFirstUpper(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper, "\t");
    _builder.append(" ");
    String _firstLower_2 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_2, "\t");
    _builder.append(",List<");
    String _firstUpper_1 = StringExtensions.toFirstUpper(target.getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_1, "\t");
    _builder.append("> ");
    String _firstLower_3 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_3, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.input = input;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.output = output;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_4 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_4, "\t\t");
    _builder.append(" = ");
    String _firstLower_5 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_5, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_6 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _firstLower_7 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_8 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_8, "\t");
    _builder.append(" getInput(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return input;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_9 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_9, "\t");
    _builder.append(" getOutput(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return output;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_10 = target.getHas().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_10, "\t");
    _builder.append(" get");
    String _firstUpper_2 = StringExtensions.toFirstUpper(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_2, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_8 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_11 = target.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_11, "\t");
    _builder.append("> get");
    String _firstUpper_3 = StringExtensions.toFirstUpper(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_3, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_9 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_9, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName (String name){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setInput(");
    String _replace_12 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_12, "\t");
    _builder.append(" input){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.input = input;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setOutput(");
    String _replace_13 = target.getInput().getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_13, "\t");
    _builder.append(" output){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.output = output;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_4 = StringExtensions.toFirstUpper(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_4, "\t");
    _builder.append("(");
    String _firstUpper_5 = StringExtensions.toFirstUpper(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_5, "\t");
    _builder.append(" ");
    String _firstLower_10 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_10, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_11 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(" = ");
    String _firstLower_12 = StringExtensions.toFirstLower(target.getHas().getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_6 = StringExtensions.toFirstUpper(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_6, "\t");
    _builder.append("(List<");
    String _firstUpper_7 = StringExtensions.toFirstUpper(target.getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_7, "\t");
    _builder.append("> ");
    String _firstLower_13 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_13, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_14 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_14, "\t\t");
    _builder.append(" = ");
    String _firstLower_15 = StringExtensions.toFirstLower(target.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_15, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence task(final Task task) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1.domain;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public class ");
    String _replace = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String description;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_1 = task.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_1, "\t");
    _builder.append("> ");
    String _firstLower = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_2 = task.getActions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_2, "\t");
    _builder.append("> ");
    String _firstLower_1 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private List<");
    String _replace_3 = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_3, "\t");
    _builder.append("> ");
    String _firstLower_2 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_2, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _replace_4 = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_4, "\t");
    _builder.append("(String name,String description,List<");
    String _replace_5 = task.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_5, "\t");
    _builder.append("> ");
    String _firstLower_3 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_3, "\t");
    _builder.append(",List<");
    String _replace_6 = task.getActions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_6, "\t");
    _builder.append("> ");
    String _firstLower_4 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_4, "\t");
    _builder.append(",List<");
    String _replace_7 = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_7, "\t");
    _builder.append("> ");
    String _firstLower_5 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_5, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.description = description;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_6 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_6, "\t\t");
    _builder.append(" = ");
    String _firstLower_7 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_7, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_8 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_8, "\t\t");
    _builder.append(" = ");
    String _firstLower_9 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_9, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_10 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_10, "\t\t");
    _builder.append(" = ");
    String _firstLower_11 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_11, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_8 = task.getActions().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_8, "\t");
    _builder.append("> get");
    String _firstUpper = StringExtensions.toFirstUpper(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_12 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_12, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_9 = task.getHas().get(0).getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_9, "\t");
    _builder.append("> get");
    String _firstUpper_1 = StringExtensions.toFirstUpper(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstUpper_1, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_13 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_13, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _replace_10 = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_10, "\t");
    _builder.append("> get");
    String _firstUpper_2 = StringExtensions.toFirstUpper(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_2, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return ");
    String _firstLower_14 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_14, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDescription(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return description;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setDescription(String description){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.description = description;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_3 = StringExtensions.toFirstUpper(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_3, "\t");
    _builder.append("(List<");
    String _firstUpper_4 = StringExtensions.toFirstUpper(task.getActions().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_4, "\t");
    _builder.append("> ");
    String _firstLower_15 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_15, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_16 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_16, "\t\t");
    _builder.append(" = ");
    String _firstLower_17 = StringExtensions.toFirstLower(task.getActions().get(0).getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_17, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_5 = StringExtensions.toFirstUpper(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstUpper_5, "\t");
    _builder.append("(List<");
    String _firstUpper_6 = StringExtensions.toFirstUpper(task.getHas().get(0).getClass().getSimpleName().replace("Impl", ""));
    _builder.append(_firstUpper_6, "\t");
    _builder.append("> ");
    String _firstLower_18 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_18, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_19 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_19, "\t\t");
    _builder.append(" = ");
    String _firstLower_20 = StringExtensions.toFirstLower(task.getHas().get(0).getClass().getSimpleName().replace("yImpl", "ies"));
    _builder.append(_firstLower_20, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void set");
    String _firstUpper_7 = StringExtensions.toFirstUpper(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstUpper_7, "\t");
    _builder.append("(List<");
    String _replace_11 = task.getClass().getSimpleName().replace("Impl", "");
    _builder.append(_replace_11, "\t");
    _builder.append("> ");
    String _firstLower_21 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_21, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.");
    String _firstLower_22 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_22, "\t\t");
    _builder.append(" = ");
    String _firstLower_23 = StringExtensions.toFirstLower(task.getClass().getSimpleName().replace("Impl", "s"));
    _builder.append(_firstLower_23, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence main(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public class main {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("MainMenu.executeMenu(MainMenu.createProject());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence MainMenu(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("public class MainMenu {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Project createProject() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Target> targetList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Task> taskList = new ArrayList<>();");
    _builder.newLine();
    {
      int _length = ((Object[])Conversions.unwrapArray(model.getProject().getTarget(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
      for(final Integer i : _doubleDotLessThan) {
        _builder.append("\t\t");
        _builder.append("String name");
        _builder.append(i, "\t\t");
        _builder.append(" = \"");
        String _name = model.getProject().getTarget().get((i).intValue()).getName();
        _builder.append(_name, "\t\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("File input");
        _builder.append(i, "\t\t");
        _builder.append(" = new File(\"");
        String _name_1 = model.getProject().getTarget().get((i).intValue()).getInput().getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("File output");
        _builder.append(i, "\t\t");
        _builder.append(" = new File(\"");
        String _name_2 = model.getProject().getTarget().get((i).intValue()).getOutput().getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("List<Property> propertyList");
        _builder.append(i, "\t\t");
        _builder.append(" = new ArrayList<>();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("List<Action> actionList");
        _builder.append(i, "\t\t");
        _builder.append(" = new ArrayList<>();");
        _builder.newLineIfNotEmpty();
        {
          int _length_1 = ((Object[])Conversions.unwrapArray(model.getProject().getTarget().get((i).intValue()).getHas().getHas(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
          for(final Integer j : _doubleDotLessThan_1) {
            _builder.append("\t\t");
            _builder.append("Property property");
            String _firstUpper = StringExtensions.toFirstUpper(model.getProject().getTarget().get((i).intValue()).getName());
            _builder.append(_firstUpper, "\t\t");
            _builder.append(j, "\t\t");
            _builder.append(" = new Property(\"");
            String _name_3 = model.getProject().getTarget().get((i).intValue()).getHas().getHas().get((j).intValue()).getName();
            _builder.append(_name_3, "\t\t");
            _builder.append("\",\"");
            String _value = model.getProject().getTarget().get((i).intValue()).getHas().getHas().get((j).intValue()).getValue();
            _builder.append(_value, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("propertyList");
            _builder.append(i, "\t\t");
            _builder.append(".add(property");
            String _firstUpper_1 = StringExtensions.toFirstUpper(model.getProject().getTarget().get((i).intValue()).getName());
            _builder.append(_firstUpper_1, "\t\t");
            _builder.append(j, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          int _length_2 = ((Object[])Conversions.unwrapArray(model.getProject().getTarget().get((i).intValue()).getHas().getActions(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
          for(final Integer j_1 : _doubleDotLessThan_2) {
            _builder.append("\t\t");
            _builder.append("List<Decision> decisionList");
            _builder.append(i, "\t\t");
            _builder.append(" = new ArrayList<>();");
            _builder.newLineIfNotEmpty();
            {
              int _length_3 = ((Object[])Conversions.unwrapArray(model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _length_3, true);
              for(final Integer k : _doubleDotLessThan_3) {
                _builder.append("\t\t");
                _builder.append("List<Property> propertyListDecision");
                _builder.append(j_1, "\t\t");
                _builder.append(" = new ArrayList<>();");
                _builder.newLineIfNotEmpty();
                {
                  int _length_4 = ((Object[])Conversions.unwrapArray(model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions().get((k).intValue()).getHas(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan_4 = new ExclusiveRange(0, _length_4, true);
                  for(final Integer a : _doubleDotLessThan_4) {
                    _builder.append("\t\t");
                    _builder.append("Property propertyDecision");
                    _builder.append(a, "\t\t");
                    _builder.append(" = new Property(\"");
                    String _name_4 = model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions().get((k).intValue()).getHas().get((a).intValue()).getName();
                    _builder.append(_name_4, "\t\t");
                    _builder.append("\",\"");
                    String _value_1 = model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions().get((k).intValue()).getHas().get((a).intValue()).getValue();
                    _builder.append(_value_1, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("propertyListDecision");
                    _builder.append(j_1, "\t\t");
                    _builder.append(".add(propertyDecision");
                    _builder.append(a, "\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("List<Condition> conditionListDecision");
                _builder.append(j_1, "\t\t");
                _builder.append(" = new ArrayList<>();");
                _builder.newLineIfNotEmpty();
                {
                  int _length_5 = ((Object[])Conversions.unwrapArray(model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions().get((k).intValue()).getCondition(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan_5 = new ExclusiveRange(0, _length_5, true);
                  for(final Integer a_1 : _doubleDotLessThan_5) {
                    _builder.append("\t\t");
                    _builder.append("Condition conditionDecision");
                    _builder.append(a_1, "\t\t");
                    _builder.append(" = new Condition(\"");
                    String _value_2 = model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getDecisions().get((k).intValue()).getCondition().get((a_1).intValue()).getValue();
                    _builder.append(_value_2, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("conditionListDecision");
                    _builder.append(j_1, "\t\t");
                    _builder.append(".add(conditionDecision");
                    _builder.append(a_1, "\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("Decision decision");
                _builder.append(k, "\t\t");
                _builder.append(" = new Decision(propertyListDecision");
                _builder.append(j_1, "\t\t");
                _builder.append(",conditionListDecision");
                _builder.append(j_1, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("decisionList");
                _builder.append(i, "\t\t");
                _builder.append(".add(decision");
                _builder.append(k, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("Action action");
            _builder.append(j_1, "\t\t");
            _builder.append(" = new Action(\"");
            String _name_5 = model.getProject().getTarget().get((i).intValue()).getHas().getActions().get((j_1).intValue()).getName();
            _builder.append(_name_5, "\t\t");
            _builder.append("\",decisionList");
            _builder.append(i, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("actionList");
            _builder.append(i, "\t\t");
            _builder.append(".add(action");
            _builder.append(j_1, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("Task task");
        _builder.append(i, "\t\t");
        _builder.append(" = new Task(\"");
        String _name_6 = model.getProject().getTarget().get((i).intValue()).getHas().getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\",\"");
        String _description = model.getProject().getTarget().get((i).intValue()).getHas().getDescription();
        _builder.append(_description, "\t\t");
        _builder.append("\",propertyList");
        _builder.append(i, "\t\t");
        _builder.append(",actionList");
        _builder.append(i, "\t\t");
        _builder.append(",null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("Target target");
        _builder.append(i, "\t\t");
        _builder.append(" = new Target(name");
        _builder.append(i, "\t\t");
        _builder.append(",input");
        _builder.append(i, "\t\t");
        _builder.append(",output");
        _builder.append(i, "\t\t");
        _builder.append(",task");
        _builder.append(i, "\t\t");
        _builder.append(",null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("targetList.add(target");
        _builder.append(i, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      int _length_6 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan_6 = new ExclusiveRange(0, _length_6, true);
      for(final Integer i_1 : _doubleDotLessThan_6) {
        _builder.append("\t\t");
        _builder.append("List<Property> propertyTaskList");
        _builder.append(i_1, "\t\t");
        _builder.append(" = new ArrayList<>();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("List<Action> actionTaskList");
        _builder.append(i_1, "\t\t");
        _builder.append(" = new ArrayList<>();");
        _builder.newLineIfNotEmpty();
        {
          int _length_7 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks().get((i_1).intValue()).getHas(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan_7 = new ExclusiveRange(0, _length_7, true);
          for(final Integer j_2 : _doubleDotLessThan_7) {
            _builder.append("\t\t");
            _builder.append("Property property");
            String _firstUpper_2 = StringExtensions.toFirstUpper(model.getProject().getTasks().get((i_1).intValue()).getName());
            _builder.append(_firstUpper_2, "\t\t");
            _builder.append(j_2, "\t\t");
            _builder.append(" = new Property(\"");
            String _name_7 = model.getProject().getTasks().get((i_1).intValue()).getHas().get((j_2).intValue()).getName();
            _builder.append(_name_7, "\t\t");
            _builder.append("\",\"");
            String _value_3 = model.getProject().getTasks().get((i_1).intValue()).getHas().get((j_2).intValue()).getValue();
            _builder.append(_value_3, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("propertyTaskList");
            _builder.append(i_1, "\t\t");
            _builder.append(".add(property");
            String _firstUpper_3 = StringExtensions.toFirstUpper(model.getProject().getTasks().get((i_1).intValue()).getName());
            _builder.append(_firstUpper_3, "\t\t");
            _builder.append(j_2, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          int _length_8 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks().get((i_1).intValue()).getActions(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan_8 = new ExclusiveRange(0, _length_8, true);
          for(final Integer j_3 : _doubleDotLessThan_8) {
            _builder.append("\t\t");
            _builder.append("List<Decision> decisionTaskList");
            _builder.append(i_1, "\t\t");
            _builder.append(" = new ArrayList<>();");
            _builder.newLineIfNotEmpty();
            {
              int _length_9 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan_9 = new ExclusiveRange(0, _length_9, true);
              for(final Integer k_1 : _doubleDotLessThan_9) {
                _builder.append("\t\t");
                _builder.append("List<Property> propertyTaskListDecision");
                _builder.append(j_3, "\t\t");
                _builder.append(" = new ArrayList<>();");
                _builder.newLineIfNotEmpty();
                {
                  int _length_10 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions().get((k_1).intValue()).getHas(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan_10 = new ExclusiveRange(0, _length_10, true);
                  for(final Integer a_2 : _doubleDotLessThan_10) {
                    _builder.append("\t\t");
                    _builder.append("Property propertyTaskDecision");
                    _builder.append(a_2, "\t\t");
                    _builder.append(" = new Property(\"");
                    String _name_8 = model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions().get((k_1).intValue()).getHas().get((a_2).intValue()).getName();
                    _builder.append(_name_8, "\t\t");
                    _builder.append("\",\"");
                    String _value_4 = model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions().get((k_1).intValue()).getHas().get((a_2).intValue()).getValue();
                    _builder.append(_value_4, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("propertyTaskListDecision");
                    _builder.append(j_3, "\t\t");
                    _builder.append(".add(propertyTaskDecision");
                    _builder.append(a_2, "\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("List<Condition> conditionTaskListDecision");
                _builder.append(j_3, "\t\t");
                _builder.append(" = new ArrayList<>();");
                _builder.newLineIfNotEmpty();
                {
                  int _length_11 = ((Object[])Conversions.unwrapArray(model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions().get((k_1).intValue()).getCondition(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan_11 = new ExclusiveRange(0, _length_11, true);
                  for(final Integer a_3 : _doubleDotLessThan_11) {
                    _builder.append("\t\t");
                    _builder.append("Condition conditionTaskDecision");
                    _builder.append(a_3, "\t\t");
                    _builder.append(" = new Condition(\"");
                    String _value_5 = model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getDecisions().get((k_1).intValue()).getCondition().get((a_3).intValue()).getValue();
                    _builder.append(_value_5, "\t\t");
                    _builder.append("\");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("conditionTaskListDecision");
                    _builder.append(j_3, "\t\t");
                    _builder.append(".add(conditionTaskDecision");
                    _builder.append(a_3, "\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t\t");
                _builder.append("Decision decisionTask");
                _builder.append(k_1, "\t\t");
                _builder.append(" = new Decision(propertyTaskListDecision");
                _builder.append(j_3, "\t\t");
                _builder.append(",conditionTaskListDecision");
                _builder.append(j_3, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("decisionTaskList");
                _builder.append(i_1, "\t\t");
                _builder.append(".add(decisionTask");
                _builder.append(k_1, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t\t");
            _builder.append("Action actionTask");
            _builder.append(j_3, "\t\t");
            _builder.append(" = new Action(\"");
            String _name_9 = model.getProject().getTasks().get((i_1).intValue()).getActions().get((j_3).intValue()).getName();
            _builder.append(_name_9, "\t\t");
            _builder.append("\",decisionTaskList");
            _builder.append(i_1, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("actionTaskList");
            _builder.append(i_1, "\t\t");
            _builder.append(".add(actionTask");
            _builder.append(j_3, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("Task taskTask");
        _builder.append(i_1, "\t\t");
        _builder.append(" = new Task(\"");
        String _name_10 = model.getProject().getTasks().get((i_1).intValue()).getName();
        _builder.append(_name_10, "\t\t");
        _builder.append("\",\"");
        String _description_1 = model.getProject().getTasks().get((i_1).intValue()).getDescription();
        _builder.append(_description_1, "\t\t");
        _builder.append("\",propertyTaskList");
        _builder.append(i_1, "\t\t");
        _builder.append(",actionTaskList");
        _builder.append(i_1, "\t\t");
        _builder.append(",null);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("taskList.add(taskTask");
        _builder.append(i_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("Project project = new Project(\"");
    String _name_11 = model.getProject().getName();
    _builder.append(_name_11, "\t\t");
    _builder.append("\",\"");
    String _version = model.getProject().getVersion();
    _builder.append(_version, "\t\t");
    _builder.append("\",targetList,taskList);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return project;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void executeMenu(Project project) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean exit = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Scanner input = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (!exit) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\" # ");
    String _firstUpper_4 = StringExtensions.toFirstUpper(model.getProject().getName());
    _builder.append(_firstUpper_4, "\t\t\t");
    _builder.append(" \");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\" Please select one option:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"0 - Exit\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"1 - Execute Tasks\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String line = input.nextLine();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int num = Integer.valueOf(line);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("switch (num) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case 0:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("exit = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("case 1:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("TaskMenu.executeMenu(project);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence TaskMenu(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package prototype1;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TaskMenu {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("public static void executeMenu(Project project) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("boolean exit = false;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("Scanner input = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("while (!exit) {");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("System.out.println(\" Please select one option:\");");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("System.out.println(\"0 - Return to main menu\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("List<String> type = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"# Targets\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int contador;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int targets = project.getTargets().size();");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("for(contador=0;contador<targets;contador++){");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("System.out.println(contador+1 + \" - \" + project.getTargets().get(contador).getTask().getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("type.add(\"Target\");");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"# Tasks\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for(int i=0;i<project.getTasks().size();i++){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("contador++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(contador + \" - \" + project.getTasks().get(i).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("type.add(\"Task\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("String line = input.nextLine();");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("int num = Integer.valueOf(line);");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("switch (num) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("case 0:");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("MainMenu.executeMenu(project);");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("    \t\t\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String typeSelected = type.get(num-1);");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("if(typeSelected.equals(\"Task\")) {");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t");
    _builder.append("System.out.println(\"Task \"+ project.getTasks().get(num-1-targets).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Task Description - \" + project.getTasks().get(num-1-targets).getDescription());");
    _builder.newLine();
    _builder.append("        \t\t\t\t\t");
    _builder.append("System.out.println(\"Properties \" + project.getTasks().get(num-1-targets).getProperties());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for(Action a : project.getTasks().get(num-1-targets).getActions()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Action \" + a.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Action Decisions \" + a.getDecisions().toString());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"#Target \" +  project.getTargets().get(num-1).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"#Input File \" +  project.getTargets().get(num-1).getInput().getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"#Output File \" +  project.getTargets().get(num-1).getOutput().getName());");
    _builder.newLine();
    _builder.append("        \t\t\t\t\t");
    _builder.append("System.out.println(\"#Task Name \" + project.getTargets().get(num-1).getTask().getName());");
    _builder.newLine();
    _builder.append("        \t\t\t\t\t");
    _builder.append("System.out.println(\"#Task Property\" + project.getTargets().get(num-1).getTask().getProperties());");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
