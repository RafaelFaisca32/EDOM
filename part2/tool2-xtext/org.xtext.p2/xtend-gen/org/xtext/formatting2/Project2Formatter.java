/**
 * generated by Xtext 2.25.0
 */
package org.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.services.Project2GrammarAccess;
import pt.isep.edom.assignment1.Model;
import pt.isep.edom.assignment1.Project;
import pt.isep.edom.assignment1.Target;
import pt.isep.edom.assignment1.Task;

@SuppressWarnings("all")
public class Project2Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private Project2GrammarAccess _project2GrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    document.<Project>format(model.getProject());
  }
  
  protected void _format(final Project project, @Extension final IFormattableDocument document) {
    EList<Target> _target = project.getTarget();
    for (final Target target : _target) {
      document.<Target>format(target);
    }
    EList<Task> _tasks = project.getTasks();
    for (final Task task : _tasks) {
      document.<Task>format(task);
    }
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof Project) {
      _format((Project)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
